{
  "name": "gulp-requirejs-optimize",
  "version": "0.3.0",
  "description": "RequireJS optimizer plugin for gulp",
  "main": "index.js",
  "directories": {
    "test": "test"
  },
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "git://github.com/jlouns/gulp-requirejs-optimize"
  },
  "author": {
    "name": "Jonathan Lounsbury",
    "email": "jlouns@gmail.com",
    "url": "https://github.com/jlouns"
  },
  "engines": {
    "node": ">=0.10.0"
  },
  "dependencies": {
    "chalk": "^1.1.1",
    "gulp-util": "^3.0.4",
    "lodash.defaults": "^3.1.0",
    "requirejs": "^2.1.20",
    "through2": "^2.0.0",
    "vinyl-sourcemaps-apply": "^0.1.4"
  },
  "devDependencies": {
    "gulp": "^3.8.11",
    "gulp-coveralls": "^0.1.3",
    "gulp-istanbul": "^0.10.0",
    "gulp-jscs": "^2.0.0",
    "gulp-jshint": "^1.10.0",
    "gulp-mocha": "^2.1.3",
    "jshint-stylish": "^2.0.1",
    "run-sequence": "^1.1.2",
    "should": "^7.1.0"
  },
  "scripts": {
    "pretest": "npm install",
    "test": "gulp test",
    "preci": "npm install",
    "ci": "gulp ci"
  },
  "keywords": [
    "gulpplugin"
  ],
  "readme": "# [gulp](http://gulpjs.com)-requirejs-optimize\n[![Build Status](https://travis-ci.org/jlouns/gulp-requirejs-optimize.svg?branch=master)](https://travis-ci.org/jlouns/gulp-requirejs-optimize)\n[![npm version](https://badge.fury.io/js/gulp-requirejs-optimize.svg)](http://badge.fury.io/js/gulp-requirejs-optimize)\n[![Coverage Status](https://coveralls.io/repos/jlouns/gulp-requirejs-optimize/badge.png)](https://coveralls.io/r/jlouns/gulp-requirejs-optimize)\n[![Dependency Status](https://david-dm.org/jlouns/gulp-requirejs-optimize.svg)](https://david-dm.org/jlouns/gulp-requirejs-optimize)\n\nOptimize AMD modules in javascript files using the requirejs optimizer.\n\n\n## Install\n\n```sh\n$ npm install --save-dev gulp-requirejs-optimize\n```\n\n\n## Usage\n\n### Simple\n\n```js\nvar gulp = require('gulp');\nvar requirejsOptimize = require('gulp-requirejs-optimize');\n\ngulp.task('scripts', function () {\n\treturn gulp.src('src/main.js')\n\t\t.pipe(requirejsOptimize())\n\t\t.pipe(gulp.dest('dist'));\n});\n```\n\n### Custom options\ngulp-requirejs-optimize accepts almost all of the same options as [r.js optimize](https://github.com/jrburke/r.js/blob/master/build/example.build.js) (see below).\n\n```js\nvar gulp = require('gulp');\nvar requirejsOptimize = require('gulp-requirejs-optimize');\n\ngulp.task('scripts', function () {\n\treturn gulp.src('src/main.js')\n\t\t.pipe(requirejsOptimize({\n\t\t\toptimize: 'none',\n\t\t\tinsertRequire: ['foo/bar/bop'],\n\t\t}))\n\t\t.pipe(gulp.dest('dist'));\n});\n```\n\n### Multiple Modules\nEach file passed to the plugin is optimized as a separate module.\n\n```js\nvar gulp = require('gulp');\nvar requirejsOptimize = require('gulp-requirejs-optimize');\n\ngulp.task('scripts', function () {\n\treturn gulp.src('src/modules/*.js')\n\t\t.pipe(requirejsOptimize())\n\t\t.pipe(gulp.dest('dist'));\n});\n```\n\n### Options generating function\nOptions can also be specified in the form of an options-generating function to generate custom options for each file passed. This can be used to apply custom logic while optimizing multiple bundles or modules in an app.\n\n```js\nvar gulp = require('gulp');\nvar requirejsOptimize = require('gulp-requirejs-optimize');\n\ngulp.task('scripts', function () {\n\treturn gulp.src('src/modules/*.js')\n\t\t.pipe(requirejsOptimize(function(file) {\n\t\t\treturn {\n\t\t\t\tname: '../vendor/bower/almond/almond',\n\t\t\t\toptimize: 'none',\n\t\t\t\tuseStrict: true,\n\t\t\t\tbaseUrl: 'path/to/base',\n\t\t\t\tinclude: 'subdir/' + file.relative\n\t\t\t};\n\t\t}))\n\t\t.pipe(gulp.dest('dist'));\n});\n```\n\n### Sourcemaps support\nThe plugin supports [gulp-sourcemaps](https://github.com/floridoo/gulp-sourcemaps) only if both `uglify2` optimization is used and `preserveLicenseComments` is set to false, as described in the `r.js` docs. If neither of these options are defined and the gulp-sourcemaps plugin is detected, the plugin will automatically set `optimize` to uglify2 and `preserveLicenseComments` to false.\n\n```js\nvar gulp = require('gulp');\nvar requirejsOptimize = require('gulp-requirejs-optimize');\nvar sourcemaps = require('gulp-sourcemaps');\n\ngulp.task('scripts', function () {\n\treturn gulp.src('src/main.js')\n\t\t.pipe(sourcemaps.init())\n\t\t.pipe(requirejsOptimize())\n\t\t.pipe(sourcemaps.write())\n\t\t.pipe(gulp.dest('dist'));\n});\n```\n\n## API\n\n### requirejsOptimize(options)\n\n#### options\n\nOptions are the same as what is supported by the [r.js optimizer](https://github.com/jrburke/r.js/blob/master/build/example.build.js) except for `out` and `modules`.\n\nr.js supports `out` as a string describing a path or a function which processes the output. Since we need to pass a virtual file as output, we only support the string version of `out`.\n\nr.js also supports an array of `modules` to optimize multiple modules at once. The same thing can be accomplished with this plugin by passing the main file of each module as input to the plugin.\n\nThe options parameter can be specified as a static object or an options-generating function. Options-generating functions are passed a file object and are expected to generate an options object.\n\n## License\n\nMIT Â© [Jonathan Lounsbury](https://github.com/jlouns)\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/jlouns/gulp-requirejs-optimize/issues"
  },
  "_id": "gulp-requirejs-optimize@0.3.0",
  "_from": "gulp-requirejs-optimize@~0.3.0"
}
